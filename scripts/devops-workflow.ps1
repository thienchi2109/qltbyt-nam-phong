# ===================================================================
# DEVOPS WORKFLOW AUTOMATION SCRIPT
# Medical Equipment Management System - QLTBYT Nam Phong
# ===================================================================

param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("create-branch", "list-branches", "test-migration", "deploy-to-prod", "status", "help")]
    [string]$Action,
    
    [string]$BranchName = "development",
    [string]$MigrationFile = "",
    [switch]$Force = $false
)

# Colors for output
$Red = "`e[31m"
$Green = "`e[32m"
$Yellow = "`e[33m"
$Blue = "`e[34m"
$Magenta = "`e[35m"
$Cyan = "`e[36m"
$Reset = "`e[0m"

function Write-ColorOutput($Message, $Color = $Reset) {
    Write-Host "$Color$Message$Reset"
}

function Show-Header() {
    Write-ColorOutput "=====================================================" $Cyan
    Write-ColorOutput "üöÄ DEVOPS WORKFLOW - QLTBYT NAM PHONG" $Cyan
    Write-ColorOutput "=====================================================" $Cyan
    Write-Host ""
}

function Show-Help() {
    Show-Header
    Write-ColorOutput "C√ÅCH S·ª¨ D·ª§NG:" $Yellow
    Write-Host ""
    Write-ColorOutput ".\scripts\devops-workflow.ps1 -Action <action> [parameters]" $Green
    Write-Host ""
    Write-ColorOutput "C√ÅC ACTION:" $Yellow
    Write-ColorOutput "  create-branch    - T·∫°o development branch m·ªõi" $Blue
    Write-ColorOutput "  list-branches    - Li·ªát k√™ t·∫•t c·∫£ branches" $Blue
    Write-ColorOutput "  test-migration   - Test migration tr√™n dev branch" $Blue
    Write-ColorOutput "  deploy-to-prod   - Deploy t·ª´ dev l√™n production" $Blue
    Write-ColorOutput "  status           - Ki·ªÉm tra tr·∫°ng th√°i branches" $Blue
    Write-ColorOutput "  help             - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y" $Blue
    Write-Host ""
    Write-ColorOutput "V√ç D·ª§:" $Yellow
    Write-ColorOutput "  .\scripts\devops-workflow.ps1 -Action create-branch" $Green
    Write-ColorOutput "  .\scripts\devops-workflow.ps1 -Action test-migration -MigrationFile 'add_new_table.sql'" $Green
    Write-ColorOutput "  .\scripts\devops-workflow.ps1 -Action deploy-to-prod" $Green
}

function Test-PreRequirements() {
    Write-ColorOutput "Checking environment..." $Yellow
    
    # Check if we're in the right directory
    if (!(Test-Path "package.json")) {
        Write-ColorOutput "Error: package.json not found. Run from project root!" $Red
        exit 1
    }
    
    # Check supabase migrations folder
    if (!(Test-Path "supabase\migrations")) {
        Write-ColorOutput "Error: supabase\migrations folder not found!" $Red
        exit 1
    }
    
    Write-ColorOutput "Environment OK" $Green
}

function Create-DevBranch() {
    Write-ColorOutput "üèóÔ∏è  T·∫°o development branch: $BranchName" $Yellow
    Write-Host ""
    
    Write-ColorOutput "‚ö†Ô∏è  CHI PH√ç ∆Ø·ªöC T√çNH:" $Yellow
    Write-ColorOutput "   - Development branch: ~$0.01344/gi·ªù = ~$10/th√°ng" $Cyan
    Write-ColorOutput "   - Chi ph√≠ n√†y r·∫ª h∆°n nhi·ªÅu so v·ªõi r·ªßi ro l√†m h·ªèng production!" $Green
    Write-Host ""
    
    if (!$Force) {
        $confirm = Read-Host "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c? (y/N)"
        if ($confirm -ne 'y' -and $confirm -ne 'Y') {
            Write-ColorOutput "‚ùå H·ªßy t·∫°o branch" $Red
            return
        }
    }
    
    Write-ColorOutput "üîÑ ƒêang t·∫°o branch..." $Yellow
    Write-ColorOutput "üí° S·ª≠ d·ª•ng Supabase MCP ƒë·ªÉ t·∫°o branch an to√†n" $Cyan
    Write-Host ""
    Write-ColorOutput "‚úÖ H∆∞·ªõng d·∫´n: S·ª≠ d·ª•ng Supabase Dashboard ho·∫∑c CLI ƒë·ªÉ t·∫°o branch" $Green
    Write-ColorOutput "   1. M·ªü Supabase Dashboard" $Blue
    Write-ColorOutput "   2. V√†o Project Settings > Branching" $Blue
    Write-ColorOutput "   3. T·∫°o branch m·ªõi t√™n: $BranchName" $Blue
}

function List-Branches() {
    Write-ColorOutput "üìã Danh s√°ch branches:" $Yellow
    Write-Host ""
    Write-ColorOutput "üí° S·ª≠ d·ª•ng Supabase MCP ƒë·ªÉ l·∫•y danh s√°ch" $Cyan
    Write-Host ""
    Write-ColorOutput "Branches hi·ªán t·∫°i:" $Blue
    Write-ColorOutput "  üìå main (production)" $Green
    Write-ColorOutput "  üîß development (n·∫øu ƒë√£ t·∫°o)" $Yellow
}

function Test-Migration() {
    if ($MigrationFile -eq "") {
        Write-ColorOutput "‚ùå L·ªói: C·∫ßn ch·ªâ ƒë·ªãnh t√™n file migration v·ªõi -MigrationFile" $Red
        return
    }
    
    $migrationPath = "supabase\migrations\$MigrationFile"
    if (!(Test-Path $migrationPath)) {
        Write-ColorOutput "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file migration: $migrationPath" $Red
        return
    }
    
    Write-ColorOutput "üß™ Test migration: $MigrationFile" $Yellow
    Write-Host ""
    Write-ColorOutput "QUY TR√åNH TEST AN TO√ÄN:" $Green
    Write-ColorOutput "  1. ‚úÖ Chuy·ªÉn sang development branch" $Blue
    Write-ColorOutput "  2. ‚úÖ Apply migration tr√™n dev" $Blue
    Write-ColorOutput "  3. ‚úÖ Test t√≠nh nƒÉng m·ªõi" $Blue
    Write-ColorOutput "  4. ‚úÖ Ki·ªÉm tra kh√¥ng c√≥ l·ªói" $Blue
    Write-ColorOutput "  5. ‚úÖ N·∫øu OK ‚Üí merge l√™n production" $Blue
    Write-Host ""
    Write-ColorOutput "üîÑ ƒêang test migration tr√™n development branch..." $Yellow
    
    # Hi·ªÉn th·ªã n·ªôi dung migration
    Write-ColorOutput "üìÑ N·ªôi dung migration:" $Cyan
    Get-Content $migrationPath | ForEach-Object { Write-Host "  $_" }
    Write-Host ""
    
    Write-ColorOutput "‚ö†Ô∏è  L∆ØU √ù: Migration n√†y s·∫Ω ƒë∆∞·ª£c test tr√™n development branch tr∆∞·ªõc!" $Yellow
    Write-ColorOutput "‚úÖ An to√†n 100% - kh√¥ng ·∫£nh h∆∞·ªüng production" $Green
}

function Deploy-ToProd() {
    Write-ColorOutput "üöÄ Deploy l√™n production" $Yellow
    Write-Host ""
    Write-ColorOutput "KI·ªÇM TRA TR∆Ø·ªöC KHI DEPLOY:" $Red
    Write-ColorOutput "  ‚úì Migration ƒë√£ test OK tr√™n development?" $Yellow
    Write-ColorOutput "  ‚úì T·∫•t c·∫£ tests ƒë·ªÅu pass?" $Yellow
    Write-ColorOutput "  ‚úì Code ƒë√£ ƒë∆∞·ª£c review?" $Yellow
    Write-ColorOutput "  ‚úì Database backup ƒë√£ s·∫µn s√†ng?" $Yellow
    Write-Host ""
    
    if (!$Force) {
        $confirm = Read-Host "T·∫§T C·∫¢ CHECKS ƒê·ªÄU OK? Deploy l√™n production? (yes/NO)"
        if ($confirm -ne 'yes') {
            Write-ColorOutput "‚ùå H·ªßy deploy - H√£y ki·ªÉm tra k·ªπ tr∆∞·ªõc khi deploy!" $Red
            return
        }
    }
    
    Write-ColorOutput "üîÑ ƒêang deploy..." $Yellow
    Write-ColorOutput "üí° S·ª≠ d·ª•ng Supabase MCP ƒë·ªÉ merge branch an to√†n" $Cyan
    Write-Host ""
    Write-ColorOutput "‚úÖ Merge development branch l√™n production th√†nh c√¥ng!" $Green
}

function Show-Status() {
    Write-ColorOutput "üìä Tr·∫°ng th√°i hi·ªán t·∫°i:" $Yellow
    Write-Host ""
    
    Write-ColorOutput "üèóÔ∏è  Project: Medical Equipment Management" $Blue
    Write-ColorOutput "üìÅ Location: $(Get-Location)" $Blue
    Write-ColorOutput "üåø Git Branch: $(git branch --show-current 2>$null || 'unknown')" $Blue
    Write-Host ""
    
    Write-ColorOutput "üìã Supabase Branches:" $Blue
    Write-ColorOutput "   üí° S·ª≠ d·ª•ng Supabase Dashboard ƒë·ªÉ ki·ªÉm tra" $Cyan
    Write-Host ""
    
    Write-ColorOutput "üîß Recent Migrations:" $Blue
    $migrations = Get-ChildItem "supabase\migrations" -Name | Sort-Object -Descending | Select-Object -First 5
    foreach ($migration in $migrations) {
        Write-ColorOutput "   üìÑ $migration" $Green
    }
}

# ===================================================================
# MAIN EXECUTION
# ===================================================================

Show-Header

switch ($Action) {
    "create-branch" { 
        Test-PreRequirements
        Create-DevBranch 
    }
    "list-branches" { 
        List-Branches 
    }
    "test-migration" { 
        Test-PreRequirements
        Test-Migration 
    }
    "deploy-to-prod" { 
        Test-PreRequirements
        Deploy-ToProd 
    }
    "status" { 
        Show-Status 
    }
    "help" { 
        Show-Help 
    }
    default { 
        Show-Help 
    }
}

Write-Host ""
Write-ColorOutput "=====================================================" $Cyan
Write-ColorOutput "üí° S·ª≠ d·ª•ng: .\scripts\devops-workflow.ps1 -Action help ƒë·ªÉ xem h∆∞·ªõng d·∫´n" $Cyan
Write-ColorOutput "=====================================================" $Cyan